/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddressBook;
import io.swagger.model.Person;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-11-17T14:24:11.401Z[GMT]")
@Api(value = "contacts", description = "the contacts API")
public interface ContactsApi {

    @ApiOperation(value = "Add a new user to the Address Book", nickname = "addPerson", notes = "", response = Person.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Person.class) })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Person> addPerson(@ApiParam(value = "Person object that needs to be added" ,required=true )  @Valid @RequestBody Person body);


    @ApiOperation(value = "Deletes a Person", nickname = "deletePerson", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 404, message = "Id not found") })
    @RequestMapping(value = "/contacts/person/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePerson(@ApiParam(value = "Person id to delete",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get full address book", nickname = "getAddressBook", notes = "", response = AddressBook.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AddressBook.class) })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AddressBook> getAddressBook();


    @ApiOperation(value = "Find person by ID", nickname = "getPerson", notes = "", response = Person.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Person.class),
        @ApiResponse(code = 404, message = "Person not found") })
    @RequestMapping(value = "/contacts/person/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Person> getPerson(@ApiParam(value = "ID of person to return",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Updated person", nickname = "updatePerson", notes = "", response = Person.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Person.class),
        @ApiResponse(code = 400, message = "Invalid user supplied") })
    @RequestMapping(value = "/contacts/person/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Person> updatePerson(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody Person body,@ApiParam(value = "id of person that needs to be updated",required=true) @PathVariable("id") Long id);

}
